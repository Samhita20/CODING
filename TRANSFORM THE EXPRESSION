Reverse Polish Notation (RPN) is a mathematical notation where every operator follows all of its operands. For instance, to add three and four, one would write "3 4 +" rather than "3 + 4". If there are multiple operations, the operator is given immediately after its second operand; so the expression written "3 − 4 + 5" would be written "3 4 − 5 +" first subtract 4 from 3, then add 5 to that.

Transform the algebraic expression with brackets into RPN form.

You can assume that for the test cases below only single letters will be used, brackets [] will not be used and each expression has only one RPN form (no expressions like a*b*c)

public static void rpn(String str)
    {
        int nextIndex = getIndex(str);
	    if(str.charAt(0) != '(')
	        System.out.print(str.charAt(0)); //if the first char is not a brace directly print it
	    else
            rpn(get(str));  // if it's a brace evaulate it using get method and send it to rpn method
	    if(nextIndex < str.length())  // if end of string is not yet reached
	    {
	        rpn(str.substring(nextIndex+1, str.length())); //take substring of the remaing expression and pass it to rpn method
	        System.out.print(str.charAt(nextIndex)); 
	    }   
    }
    public static int getIndex(String str)
    {
        if(str.charAt(0)!='(')
            return 1;
        int brackets = 1; // counts the number of brackets if 0 expression is completed
        for(int i=1;i<str.length();i++)
        {
            if(str.charAt(i)=='(')
                brackets++;
            else if(str.charAt(i)==')')
                brackets--;
            if(brackets==0)
                return i+1;
        }
        return -1; //should never happen
    }
    public static String get(String str)
    {
        String result = "";
        if(str.charAt(0)!='(')
            return " "+str.charAt(0);
        int brackets = 1; // counts the number of brackets if 0 expression is completed
        for(int i=1;i<str.length();i++)
        {
            if(str.charAt(i)=='(')
                brackets++;
            else if(str.charAt(i)==')')
                brackets--;
            if(brackets==0)
                break;
            else 
                result += str.charAt(i);
        }
        return result;
    }
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		sc.nextLine(); //clear buffer
		while(t--!=0)
		{
	        String str = sc.nextLine();
	        rpn(str);
	        System.out.println();
		}
	}
